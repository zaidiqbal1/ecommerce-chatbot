# -*- coding: utf-8 -*-
"""AIChatbot_Task9_Zaid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oLnSurDu6z767evqxIoLDtECA5gaGZ77
"""

!pip install streamlit scikit-learn pandas pyngrok

!ngrok config add-authtoken 31NRb4tPZWPDP73B3GjOi7P7PM5_7mvTsKqAXNnCCDD2QgZDo

import pandas as pd

data = {
    "question": [
        "What is your return policy?",
        "How long does delivery take?",
        "Do you ship internationally?",
        "What payment methods do you accept?",
        "How can I track my order?",
        "Do you offer discounts?",
        "Can I cancel my order?",
        "What if I receive a damaged product?"
    ],
    "answer": [
        "You can return any product within 30 days of purchase.",
        "Delivery usually takes 3-5 business days.",
        "Yes, we ship internationally with additional charges.",
        "We accept credit cards, debit cards, and PayPal.",
        "You can track your order using the tracking link sent via email.",
        "Yes, we offer seasonal discounts and promotions.",
        "You can cancel your order before it is shipped.",
        "If you receive a damaged product, contact support for a replacement or refund."
    ]
}

df = pd.DataFrame(data)
df.to_csv("faq.csv", index=False)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile ecommerce_faq.json
# [
#     {"question": "What are your delivery charges?", "answer": "We offer free delivery on orders above $50. Otherwise, a $5 shipping fee applies."},
#     {"question": "How can I track my order?", "answer": "You can track your order using the tracking link sent to your email after purchase."},
#     {"question": "What payment methods do you accept?", "answer": "We accept credit/debit cards, PayPal, and Cash on Delivery."},
#     {"question": "Can I return a product?", "answer": "Yes, you can return products within 30 days of delivery."},
#     {"question": "Do you offer international shipping?", "answer": "Yes, we ship to selected countries outside the US."}
# ]

import json
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load dataset
with open("ecommerce_faq.json", "r") as f:
    data = json.load(f)

# Extract questions and answers
questions = [item["question"] for item in data]
answers = [item["answer"] for item in data]

# Vectorize questions
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(questions)

print("🛍️ Welcome to the E-commerce Chatbot (CLI Version)")
print("Type 'exit' to quit.\n")

while True:
    query = input("You: ")

    if query.lower() == "exit":
        print("Chatbot: Thank you for visiting! Have a great day! 👋")
        break

    # Transform user query
    query_vec = vectorizer.transform([query])
    similarity = cosine_similarity(query_vec, X).flatten()

    # Get best match
    idx = similarity.argmax()
    score = similarity[idx]

    # Threshold for fallback
    if score > 0.3:
        print("Chatbot:", answers[idx])
    else:
        print("Chatbot: Sorry, I don't have an answer for that. Please contact our customer support. 📞")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile streamlit_app.py
# import pandas as pd
# from sklearn.feature_extraction.text import TfidfVectorizer
# from sklearn.metrics.pairwise import cosine_similarity
# import streamlit as st
# 
# # Load dataset
# df = pd.read_csv("faq.csv")
# 
# # Vectorize questions
# vectorizer = TfidfVectorizer()
# X = vectorizer.fit_transform(df["question"])
# 
# # Function to get best answer with fallback
# def get_answer(user_input, threshold=0.3):  # threshold adjust kar sakte ho
#     user_vec = vectorizer.transform([user_input])
#     similarity = cosine_similarity(user_vec, X)
#     max_score = similarity.max()  # best similarity score
#     idx = similarity.argmax()
# 
#     if max_score < threshold:  # agar similarity kam hai
#         return "❌ Sorry, I don’t have that info right now. Please contact our support team."
#     else:
#         return df.iloc[idx]["answer"]
# 
# # Streamlit UI
# st.set_page_config(page_title="🛒 E-commerce Chatbot", layout="centered")
# 
# st.title("🤖 E-commerce FAQ Chatbot")
# st.write("Ask me anything about our store, delivery, payments, or orders!")
# 
# user_input = st.text_input("💬 Type your question here:")
# 
# if user_input:
#     answer = get_answer(user_input)
#     st.success(f"**Answer:** {answer}")
#

!streamlit run streamlit_app.py &>/dev/null&

from pyngrok import ngrok

public_url = ngrok.connect(8501)
print("🚀 Chatbot is live at:", public_url)